// client/team.data.js
import Debug2 from "file:///Users/pirog/work/vitepress-theme-default-plus/node_modules/debug/src/index.js";

// utils/parse-stdout.js
import { execSync } from "node:child_process";
function parse_stdout_default(cmd, options) {
  const stdout = execSync(cmd, { maxBuffer: 1024 * 1024 * 10, encoding: "utf-8", ...options });
  return options.trim === true ? stdout.trim() : stdout;
}

// utils/get-contributors.js
import findIndex from "file:///Users/pirog/work/vitepress-theme-default-plus/node_modules/lodash-es/findIndex.js";
import gravatarUrl from "file:///Users/pirog/work/vitepress-theme-default-plus/node_modules/gravatar-url/index.js";
import groupBy from "file:///Users/pirog/work/vitepress-theme-default-plus/node_modules/lodash-es/groupBy.js";
import Debug from "file:///Users/pirog/work/vitepress-theme-default-plus/node_modules/debug/src/index.js";
var parseStringInclude = (data) => {
  const parts = data.trim().split(" ");
  if (!Number.isInteger(parseInt(parts[0]))) parts[0] = 1;
  parts[0] = parts[0] = `     ${parts[0]}	`;
  return parts.join(" ");
};
function async(cwd, {
  merge = "name",
  debotify = true,
  include = [],
  exclude = []
} = {}, {
  debug: debug2 = Debug("@lando/get-contributors"),
  // eslint-disable-line
  paths = []
} = {}) {
  const command = ["git", "--no-pager", "shortlog", "-nes", "HEAD"];
  const opts = { cwd, stdin: "inherit" };
  if (paths.length > 0) command.push("--", ...paths);
  debug2("running command %o with exec options %o", command, opts);
  const stdout = parse_stdout_default(command.join(" "), opts);
  let data = stdout.split("\n");
  const includeStrings = include.filter((contributor) => typeof contributor === "string") ?? [];
  const includeObjects = include.filter((contributor) => typeof contributor === "object") ?? [];
  if (includeStrings.length > 0) for (const contributor of includeStrings) data.push(parseStringInclude(contributor));
  data = data.map((item) => item.trim().match(/^(\d+)\t(.*) <(.*)>$/)).filter((item) => item !== null).map(([, commits, name, email]) => ({
    commits: Number.parseInt(commits, 10),
    email,
    name: name.trim(),
    avatar: gravatarUrl(email),
    title: void 0,
    org: void 0,
    maintainer: false,
    links: []
  }));
  if (includeObjects.length > 0) {
    for (const contributor of includeObjects) {
      const existing = data.find((member) => member.email === contributor.email || member.email === contributor.mergeWith);
      if (existing) Object.assign(existing, contributor);
      else if (!existing && contributor.mergeOnly !== true) data.push({ name: "", email: "", ...contributor });
    }
  }
  ;
  if (debotify) {
    data = data.filter((contributor) => !contributor.email.includes("[bot]") && !contributor.name.includes("[bot]")).filter((contributor) => contributor.email !== "rtfm47@lando.dev");
  }
  if (exclude.length > 0) {
    for (let excluded of exclude) {
      if (typeof excluded === "string" && excluded.match(/^(.*) <(.*)>$/) !== null) {
        const parts = excluded.match(/^(.*) <(.*)>$/);
        excluded = { name: parts[1], email: parts[2] };
      }
      if (findIndex(data, excluded) > -1) data.splice(findIndex(data, excluded), 1);
    }
  }
  if (merge !== false && ["email", "name"].includes(merge)) {
    const grouped = groupBy(data, merge);
    for (const [id, matches] of Object.entries(grouped)) {
      if (matches.length > 1) {
        const best = matches[0];
        best.commits = matches.map((match) => match.commits).reduce((sum, amount) => sum + amount, 0);
        for (const special of ["links", "org", "title"]) {
          if (!best[special] || Array.isArray(best[special]) && best[special].length === 0) {
            best[special] = matches.map((match) => match[special]).filter((data2) => data2 !== void 0 && data2 !== null && data2 !== "" && data2.length !== 0)[0];
          }
        }
        grouped[id] = [best];
      }
    }
    data = Object.entries(grouped).map(([name, matches]) => matches[0]);
  }
  data = data.sort((a, b) => b.commits - a.commits);
  const maintainers = data.filter((contrib) => contrib.maintainer);
  const contributors = data.filter((contrib) => !contrib.maintainer);
  return maintainers.concat(contributors);
}

// client/team.data.js
var debug = Debug2("@lando/team.data.js");
var siteConfig = globalThis.VITEPRESS_CONFIG;
var team_data_default = {
  async load() {
    const contributors = siteConfig?.userConfig?.themeConfig?.contributors ?? false;
    const root = siteConfig?.userConfig?.gitRoot;
    const team = contributors !== false ? await async(root, contributors, { debug: debug.extend("get-contribs"), paths: [] }) : [];
    debug("loading team data %o", team);
    return team;
  }
};
export {
  team_data_default as default
};
//# sourceMappingURL=data:application/json;base64,
